{"version":3,"sources":["component/ScoreBoard.js","component/Card.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["ScoreBoard","props","className","points","bScore","Card","src","image","alt","name","onClick","clickfunct","charId","Alert","class","role","type","data-bs-dismiss","aria-label","clickedChar","App","useState","score","setScore","bestscore","setBestScore","charactersList","setCharactersList","useEffect","length","fetch","then","res","json","data","characterComponent","map","character","id","includes","handleScore","push","shuffledAry","ary","currentIdx","randIdx","Math","floor","random","shuffle","shuffleAry","handleClick","params","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAqBeA,EAnBI,SAACC,GAIlB,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,iCAAf,UACE,8BACE,4DAEF,gCACE,mBAAGA,UAAU,cAAb,yBACA,wCAAU,sBAAMA,UAAU,QAAhB,SAA0BD,EAAME,SAA1C,qBAA6E,sBAAMD,UAAU,QAAhB,SAAyBD,EAAMG,qBCAvGC,EAZF,SAACJ,GAEZ,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKI,IAAKL,EAAMM,MAAOL,UAAU,eAAeM,IAAKP,EAAMQ,KAAOC,QAAS,kBAAMT,EAAMU,WAAWV,EAAMW,WACxG,mBAAGV,UAAU,wBAAb,SAAsCD,EAAMQ,aCNrC,SAASI,IACtB,OACE,sBAAKC,MAAM,kDAAkDC,KAAK,QAAlE,4KACiK,8CADjK,iCACwN,0CADxN,kGAEE,wBAAQC,KAAK,SAASF,MAAM,YAAYG,kBAAgB,QAAQC,aAAW,a,UCC7EC,EAAc,GAoFHC,MAlFf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAEqBF,mBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGiBJ,mBAAS,IAH1B,gCAI+BA,mBAAS,KAJxC,mBAINK,EAJM,KAIUC,EAJV,KAabC,qBAAU,WAEsB,IAA1BF,EAAeG,QARnBC,MAAM,+DACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIP,EAAkBO,QASjC,CAACf,IAEJ,IAAMgB,EAAqBT,EAAeU,KAAI,SAAAC,GAAS,OAAI,cAAC,EAAD,CAAyB5B,KAAM4B,EAAU5B,KAAMF,MAAO8B,EAAU9B,MAAOI,WAAY,kBAG9I,SAAqB2B,GACfnB,EAAYoB,SAASD,IACvBE,EAAY,UACZjB,EAAS,GACTJ,EAAc,KAEdA,EAAYsB,KAAKH,GACjBE,MAsBJ,WACE,IAAME,EAIR,SAAiBC,GACf,IAAIC,EAAaD,EAAId,OAErB,KAAO,IAAMe,GAAa,CACxB,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWJ,GACzCA,GAAc,EAFU,MAGU,CAACD,EAAIE,GAAUF,EAAIC,IAApDD,EAAIC,GAHmB,KAGND,EAAIE,GAHE,KAK1B,OAAOF,EAZaM,CAAQvB,GAC5BC,EAAkBe,GAtBnBQ,GAZmJC,CAAYd,EAAUC,KAAK1B,OAAQyB,EAAUC,IAA3HD,EAAUC,OAehF,SAASE,EAAYY,GAIJ,WAAXA,GAEE9B,EAAQE,GACVC,EAAaD,EAAYF,GAG3BC,EAASD,EAAQ,IAEjBC,EAASD,EAAQ,GAsBrB,OACE,sBAAKpB,UAAU,YAAf,UACE,uBACA,cAAC,EAAD,CAAYC,OAAQmB,EAAOlB,OAAQoB,IACnC,uBACA,cAACX,EAAD,IACA,qBAAKX,UAAU,mCAAf,SACGiC,QCzEMkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.c6e92536.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ScoreBoard = (props) => {\r\n  // create score and bestscore  then set them to 0\r\n  // when user clicks a picture add a score +1 unless the pic has already been clicked \r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"d-flex justify-content-between\">\r\n        <div>\r\n          <h2>rick &amp; morty memory game</h2>\r\n        </div>\r\n        <div>\r\n          <p className=\"text-center\">score board</p>\r\n          <p>score: <span className=\"score\">{ props.points }</span> &nbsp; best score: <span className=\"score\">{props.bScore}</span></p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScoreBoard;","import React, { useState, useEffect } from 'react';\r\n\r\nconst Card = (props) => {\r\n  // console.log(props)\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"card\">\r\n        <img src={props.image} className=\"card-img-top\" alt={props.name}  onClick={() => props.clickfunct(props.charId) }/>\r\n        <p className=\"card-text text-center\">{props.name}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nexport default function Alert() {\r\n  return (\r\n    <div class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n      This application puts your memory to the test. You are presented with multiple images of celebrities. The images get shuffled every-time they are clicked. You <strong> CAN NOT</strong> click on any image more than <strong>once</strong> or else your score resets to zero. The main objective is to get the highest score as possible.\r\n      <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect, useCallback } from 'react';\r\nimport ScoreBoard from \"./component/ScoreBoard\";\r\nimport Card from \"./component/Card\";\r\nimport Alert from \"./component/Alert\";\r\nimport './App.css';\r\n\r\n\r\nlet clickedChar = [];\r\n\r\nfunction App() {\r\n  const [score, setScore] = useState(0);\r\n  const [bestscore, setBestScore] = useState(0);\r\n  const [clicked, setclicked] = useState([]);\r\n  const [charactersList, setCharactersList] = useState([]);\r\n\r\n  function fetchData() {\r\n    fetch(\"https://rickandmortyapi.com/api/character/[1,2,3,4,5,6,7,8]\")\r\n      .then(res => res.json())\r\n      .then(data => setCharactersList(data));\r\n  }\r\n\r\n  \r\n  useEffect(() => { \r\n    // Only call the api when the characterList array is empty\r\n    if (charactersList.length === 0) {\r\n    fetchData(); \r\n    }\r\n  }, [clickedChar]);\r\n  \r\n  const characterComponent = charactersList.map(character => <Card key={character.id} name={character.name} image={character.image} clickfunct={() => handleClick(character.id)} charId={character.id}/>);  \r\n\r\n  // It's better to use ids to track which picture has been clicked.\r\n  function handleClick(id) {\r\n    if (clickedChar.includes(id)) {\r\n      handleScore('remove')\r\n      setScore(0);\r\n      clickedChar = [];\r\n    } else {\r\n      clickedChar.push(id);\r\n      handleScore();\r\n    }\r\n   shuffleAry();\r\n  }\r\n  \r\n  function handleScore(params) {\r\n    // score to 0 if user clicked a picture that was already clicked \r\n    // add score if pic has not been clicked before\r\n    // Remove 1 if a user clicks on a pic that has been clicked before.\r\n    if (params === 'remove') {\r\n      // set best score  = current scor\r\n      if (score > bestscore) {\r\n        setBestScore(bestscore + score);\r\n      }\r\n\r\n      setScore(score - 1);\r\n    } else {\r\n      setScore(score + 1);\r\n    }\r\n\r\n  }\r\n\r\n  function shuffleAry() {\r\n    const shuffledAry = shuffle(charactersList);\r\n    setCharactersList(shuffledAry);\r\n  }\r\n\r\n  function shuffle(ary) {\r\n    let currentIdx = ary.length;\r\n\r\n    while (0 !== currentIdx ) {\r\n      let randIdx = Math.floor(Math.random() * currentIdx);\r\n      currentIdx -= 1;\r\n      [ary[currentIdx], ary[randIdx]] = [ary[randIdx], ary[currentIdx]];\r\n    }\r\n    return ary;\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <br />\r\n      <ScoreBoard points={score} bScore={bestscore} />\r\n      <br />\r\n      <Alert />\r\n      <div className=\"row row-cols-3 row-cols-md-3 g-4\">\r\n        {characterComponent } \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}